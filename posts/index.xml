<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Carlos的废话集</title>
    <link>https://carlos19960601.github.io/posts/</link>
    <description>Recent content in Posts on Carlos的废话集</description>
    <generator>Hugo -- 0.139.3</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 30 Nov 2024 22:08:35 +0800</lastBuildDate>
    <atom:link href="https://carlos19960601.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Css学习笔记</title>
      <link>https://carlos19960601.github.io/posts/css%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 30 Nov 2024 22:08:35 +0800</pubDate>
      <guid>https://carlos19960601.github.io/posts/css%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;h3 id=&#34;tailwindcss&#34;&gt;tailwindcss&lt;/h3&gt;
&lt;h4 id=&#34;arbitrary-values&#34;&gt;Arbitrary values&lt;/h4&gt;
&lt;p&gt;在使用tailwind的时候，如果遇到没有预定值的样式，就可以使用arbitrary values。&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bg-[#ff8906]&lt;/code&gt; 就可以设置背景色为橙色。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;w-[300px]&lt;/code&gt; 就可以设置宽度为300px。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还有一些，就是没有定义类型的，最常见的就是svg的属性。&lt;code&gt;stroke-dasharray&lt;/code&gt;在tailwind中就没有定义类型，所以就可以使用arbitrary values。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[stroke-dasharray:450,0]&lt;/code&gt;: 设置stroke-dasharray为450,0。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;styling-based-on-parent-statehttpstailwindcsscomdocshover-focus-and-other-statesstyling-based-on-parent-state&#34;&gt;&lt;a href=&#34;https://tailwindcss.com/docs/hover-focus-and-other-states#styling-based-on-parent-state&#34;&gt;styling-based-on-parent-state&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;这种是在子元素依赖于父元素hover等状态时使用的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;group block max-w-xs mx-auto rounded-lg p-6 bg-white ring-1 ring-slate-900/5 shadow-lg space-y-3 hover:bg-sky-500 hover:ring-sky-500&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flex items-center space-x-3&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;svg&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;h-6 w-6 stroke-sky-500 group-hover:stroke-white&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fill&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;viewBox&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0 0 24 24&amp;#34;&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;svg&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;h3&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text-slate-900 group-hover:text-white text-sm font-semibold&amp;#34;&lt;/span&gt;&amp;gt;New project&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;h3&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text-slate-500 group-hover:text-white text-sm&amp;#34;&lt;/span&gt;&amp;gt;Create a new project from a variety of starting templates.&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;设置&lt;code&gt;group&lt;/code&gt;，然后在子元素上使用&lt;code&gt;group-hover&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;stroke-dasharray属性httpscss-trickscomalmanacpropertiessstroke-dasharray&#34;&gt;&lt;a href=&#34;https://css-tricks.com/almanac/properties/s/stroke-dasharray/&#34;&gt;stroke-dasharray属性&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;首先这个是给svg使用的属性。控制stroke的dash长度和间隔长度。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stroke-dasharray: 2; 表示dash的长度为2，间隔长度为2。&lt;/li&gt;
&lt;li&gt;stroke-dasharray: 2 4; 表示dash的长度为2，间隔长度为4。&lt;/li&gt;
&lt;li&gt;stroke-dasharray: 5 10 15; 表示dash的长度为5，间隔长度为10，dash的长度为15，间隔长度为5。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>杂七杂八</title>
      <link>https://carlos19960601.github.io/posts/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/</link>
      <pubDate>Thu, 14 Nov 2024 16:35:43 +0800</pubDate>
      <guid>https://carlos19960601.github.io/posts/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/</guid>
      <description>&lt;h3 id=&#34;npx-怎么用pnpm替代&#34;&gt;npx 怎么用pnpm替代&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Running executables inside your downloaded dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;npx jest&lt;/code&gt; -&amp;gt; &lt;code&gt;pnpm exec jest&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Running executable commands in packages you want to download transiently&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;npx create-react-app my-app&lt;/code&gt; -&amp;gt; &lt;code&gt;pnpm dlx create-react-app my-app&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;pnpm&#34;&gt;pnpm&lt;/h3&gt;
&lt;p&gt;全局的公共依赖包&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pnpm install react -w

pnpm install rollup -wD
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;给某个package单独安装指定依赖&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pnpm add axios --filter @qftjs/monorepo1
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pnpm build --filter @qftjs/monorepo1

pnpm build --filter &amp;#34;./packages/**&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;模块之间的相互依赖&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pnpm install @qftjs/monorepo2 -r --filter @qftjs/monorepo1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;参考资料&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/75413361/can-i-use-npx-with-pnpm&#34;&gt;Can I use npx with pnpm?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;五险一金&#34;&gt;五险一金&lt;/h3&gt;
&lt;p&gt;养老保险：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;个人: 8% 单位: 16%&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;typescripe-别名&#34;&gt;typescripe 别名&lt;/h3&gt;
&lt;p&gt;開發環境下，我們使用 nodemon，而 nodemon 又是使用 ts-node，所以我們的目標便是讓 ts-node 套件可以解析路徑別名&lt;/p&gt;</description>
    </item>
    <item>
      <title>HTTP协议</title>
      <link>https://carlos19960601.github.io/posts/http%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Tue, 05 Nov 2024 14:56:46 +0800</pubDate>
      <guid>https://carlos19960601.github.io/posts/http%E5%8D%8F%E8%AE%AE/</guid>
      <description>&lt;h3 id=&#34;http协议&#34;&gt;HTTP协议&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;明文传输 -&amp;gt; 导致 内容会被篡改（中间人攻击）-&amp;gt; 解决方案：加密&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;加密方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对称加密：加密和解密使用的同一个密钥&lt;/li&gt;
&lt;li&gt;非对称加密: 公钥和私钥有个特别的单向性，虽然都可以用来加密解密，但公钥加密后只能用私钥解密，反过来，私钥加密后也只能用公钥解密。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结合这2种加密方式就能完成密钥互换 -&amp;gt; 破解方式: 中间人模拟服务器行为 -&amp;gt; HTTPS&lt;/p&gt;
&lt;p&gt;简单流程如下：首先服务端将公钥公布出去，那么客户端也就知道公钥了。接下来客户端创建一个秘钥，然后通过公钥加密并发送给服务端，服务端接收到密文以后通过私钥解密出正确的秘钥，这时候两端就都知道秘钥是什么了。&lt;/p&gt;
&lt;h3 id=&#34;https协议&#34;&gt;HTTPS协议&lt;/h3&gt;
&lt;p&gt;中间人模拟服务器行为主要原因是 中间人不被信任，那么HTTPS有&lt;strong&gt;CA 认证体系&lt;/strong&gt;，&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/http%e5%8d%8f%e8%ae%ae/CA%e7%ad%be%e5%8f%91%e8%af%81%e4%b9%a6.png&#34; alt=&#34;CA签发证书&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;CA 签发证书的过程，如上图左边部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;⾸先 CA 会把持有者的公钥、⽤途、颁发者、有效时间等信息打成⼀个包，然后对这些信息进⾏ Hash 计算，得到⼀个 Hash 值；&lt;/li&gt;
&lt;li&gt;然后 CA 会使⽤⾃⼰的私钥将该 Hash 值加密，⽣成 Certificate Signature，也就是 CA 对证书做了签名；&lt;/li&gt;
&lt;li&gt;最后将 Certificate Signature 添加在⽂件证书上，形成数字证书；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;客户端校验服务端的数字证书的过程，如上图右边部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;⾸先客户端会使⽤同样的 Hash 算法获取该证书的 Hash 值 H1；&lt;/li&gt;
&lt;li&gt;通常浏览器和操作系统中集成了 CA 的公钥信息，浏览器收到证书后可以使⽤ CA 的公钥解密 Certificate&lt;/li&gt;
&lt;li&gt;Signature 内容，得到⼀个 Hash 值 H2 ；&lt;/li&gt;
&lt;li&gt;最后⽐较 H1 和 H2，如果值相同，则为可信赖的证书，否则则认为证书不可信。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HTTPS抓包：&lt;/p&gt;
&lt;p&gt;抓包出来都是加密的数据，抓包工具模拟中间人，伪造证书，客户端会提示证书不被信任，如果客户端同意，请求就会被抓包工具拦截，转发给服务端。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Vscode使用小技巧</title>
      <link>https://carlos19960601.github.io/posts/vscode%E4%BD%BF%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Wed, 30 Oct 2024 18:00:36 +0800</pubDate>
      <guid>https://carlos19960601.github.io/posts/vscode%E4%BD%BF%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7/</guid>
      <description>&lt;h3 id=&#34;标记重要的代码点&#34;&gt;标记重要的代码点&lt;/h3&gt;
&lt;p&gt;在阅读代码的时候，有一些关键代码(比如核心逻辑、代码入口等)需要经常找，所以我想要够标记一下，这样就能快速定位。&lt;/p&gt;
&lt;p&gt;可以借助&lt;code&gt;TODO Tree&lt;/code&gt;插件标记todo一样。自定义一个&lt;code&gt;IMPORTANT&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;todo-tree.highlights.customHighlight&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;IMPORTANT&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;background&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#ff000080&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用的时候像这样就能够在&lt;code&gt;TODO tree&lt;/code&gt;里面看到了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// IMPORTANT: 本地流量入口
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;listener&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ReCreateHTTP&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;general&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Port&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;tunnel&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Tunnel&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;光标移动更加顺滑&#34;&gt;光标移动更加顺滑&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;editor.smoothScrolling&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;editor.cursorBlinking&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;smooth&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Hands on Machine Learning With Scikit Learn, Keras, and TensorFlow 学习笔记</title>
      <link>https://carlos19960601.github.io/posts/hands-on-machine-learning-with-scikit-learn-keras-and-tensorflow-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 29 Oct 2024 14:35:16 +0800</pubDate>
      <guid>https://carlos19960601.github.io/posts/hands-on-machine-learning-with-scikit-learn-keras-and-tensorflow-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;h1 id=&#34;chapter-1-the-machine-learning-landscape&#34;&gt;Chapter 1: The Machine Learning Landscape&lt;/h1&gt;
&lt;p&gt;机器学习分类：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;是否监督&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;监督学习(Supervised learning)&lt;/li&gt;
&lt;li&gt;非监督学习(Unsupervised learning)&lt;/li&gt;
&lt;li&gt;半监督学习(Semi-supervised learning)&lt;/li&gt;
&lt;li&gt;自监督学习(Self-supervised learning)&lt;/li&gt;
&lt;li&gt;强化学习(Reinforcement learning)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;批量vs在线学习&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Batch learning&lt;/li&gt;
&lt;li&gt;Online learning&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Instance-Based Versus Model-Based Learning&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Instance-based learning&lt;/li&gt;
&lt;li&gt;Model-based learning and a typical machine learning workflow&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;机器学习的主要挑战&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;训练数据量不足(Insufficient Quantity of Training Data)&lt;/li&gt;
&lt;li&gt;非代表性训练数据(Nonrepresentative Training Data)&lt;/li&gt;
&lt;li&gt;劣质数据(Poor-Quality Data)&lt;/li&gt;
&lt;li&gt;不相关特征(Irrelevant Features)&lt;/li&gt;
&lt;li&gt;过拟合(Overfitting the Training Data)&lt;/li&gt;
&lt;li&gt;欠拟合(Underfitting the Training Data)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;chapter-2-end-to-end-machine-learning-project&#34;&gt;Chapter 2: End-to-End Machine Learning Project&lt;/h1&gt;
&lt;p&gt;通过一个预测房价的实例介绍机器学习实践流程。&lt;/p&gt;
&lt;p&gt;前提是明确需求的情况下，现在手里有一份数据。怎么开始进行机器学习。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先了解数据，整体熟悉数据结构。
&lt;ol&gt;
&lt;li&gt;panda查看数据统计&lt;/li&gt;
&lt;li&gt;matplotlib绘制图标&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;创建测试集
&lt;ol&gt;
&lt;li&gt;分层抽样&lt;/li&gt;
&lt;li&gt;测试集不要在训练阶段使用&lt;/li&gt;
&lt;li&gt;抽样要随机&lt;/li&gt;
&lt;li&gt;结果要保持一致，不要多次创建测试集后，让模型学习了所有数据&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;看看数据分布
&lt;ol&gt;
&lt;li&gt;看看相关性(Correlations)&lt;/li&gt;
&lt;li&gt;尝试组合特征&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;数据预处理
&lt;ol&gt;
&lt;li&gt;缺失值补齐&lt;/li&gt;
&lt;li&gt;处理分类数据&lt;/li&gt;
&lt;li&gt;特征缩放&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;选择和训练模型
&lt;ol&gt;
&lt;li&gt;尝试不同的模型&lt;/li&gt;
&lt;li&gt;交叉验证不同模型的效果&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;微调模型
&lt;ol&gt;
&lt;li&gt;Grid Search&lt;/li&gt;
&lt;li&gt;Randomized Search&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;分析模型和错误&lt;/li&gt;
&lt;li&gt;在测试集上评估模型&lt;/li&gt;
&lt;li&gt;上线模型&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;chapter-3-classification&#34;&gt;Chapter 3: Classification&lt;/h1&gt;
&lt;p&gt;通过一个识别手写数字的实例介绍分类。&lt;/p&gt;</description>
    </item>
    <item>
      <title>浏览器跨域</title>
      <link>https://carlos19960601.github.io/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B7%A8%E5%9F%9F/</link>
      <pubDate>Fri, 11 Oct 2024 09:58:02 +0800</pubDate>
      <guid>https://carlos19960601.github.io/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B7%A8%E5%9F%9F/</guid>
      <description>&lt;h3 id=&#34;背景&#34;&gt;背景&lt;/h3&gt;
&lt;p&gt;最近在写项目的时候，发现如果后端没有处理CORS的问题，前端使用Axios请求数据的时候，会直接报Axios Network Error。影响了开发。&lt;/p&gt;
&lt;h3 id=&#34;解决&#34;&gt;解决&lt;/h3&gt;
&lt;p&gt;一般情况下后端服务都会有CORS middleware。能够直接解决CORS的问题。但是如果每个服务都这样，我觉得麻烦。所以尝试使用Nginx来同样处理。&lt;/p&gt;
&lt;p&gt;跨域相关的响应头&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Access-Control-Allow-Origin&lt;/strong&gt;: Used to set the source address that allows cross-domain requests (preflight requests and formal requests will be verified when cross-domain)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Access-Control-Allow-Headers&lt;/strong&gt;: Special header information fields allowed to be carried across domains (only verified in preflight requests)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Access-Control-Allow-Methods&lt;/strong&gt;: Cross-domain allowed request methods or HTTP verbs (only in preflight request verification)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Access-Control-Allow-Credentials&lt;/strong&gt;: Whether to allow the use of cookies across domains. If you want to use cookies across domains, you can add this request response header and set the value to true (setting it or not setting it will not affect the sending of the request, but will only affect whether cookies should be carried across domains. , but if set, both preflight requests and formal requests need to be set). However, it is not recommended to use it cross-domain (it has been used in the project, but it is unstable and cannot be carried by some browsers) unless necessary, because there are many alternatives.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果出现跨域，直接在前端请求会报错&lt;/p&gt;</description>
    </item>
    <item>
      <title>面试</title>
      <link>https://carlos19960601.github.io/posts/%E9%9D%A2%E8%AF%95/</link>
      <pubDate>Wed, 09 Oct 2024 11:30:42 +0800</pubDate>
      <guid>https://carlos19960601.github.io/posts/%E9%9D%A2%E8%AF%95/</guid>
      <description>&lt;h3 id=&#34;数据库&#34;&gt;数据库&lt;/h3&gt;
&lt;h4 id=&#34;countcount1count0countidcountname之间的区别&#34;&gt;Count(*)、Count(1)、Count(0)、Count(id)、Count(name)之间的区别?&lt;/h4&gt;
&lt;p&gt;Count都会进行一次全表便利，Count(*)、Count(1)、Count(0)不会从底层获取数据，直接进行count++。但是id和name会从底层获取数据进行判断是否为null才进行count++。此外MySQL会借助占用页最小的索引进行遍历。&lt;/p&gt;
&lt;h3 id=&#34;系统设计&#34;&gt;系统设计&lt;/h3&gt;
&lt;h4 id=&#34;怎么避免单点故障spofsingle-point-of-failure&#34;&gt;怎么避免单点故障(SPOF、Single Point of Failure)？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Redundancy(冗余): Primary vs Standby，比如流量入口，load banlaner进行主备&lt;/li&gt;
&lt;li&gt;Load Balancing(负载均衡)&lt;/li&gt;
&lt;li&gt;Data Replication(数据复制): 数据库、缓存的主从&lt;/li&gt;
&lt;li&gt;Geographic Distributio(异地多活)：异地多集群的数据复制（同步或异步）&lt;/li&gt;
&lt;li&gt;Graceful Handling of Failures&lt;/li&gt;
&lt;li&gt;Monitoring and Alerting&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;技术选型&#34;&gt;技术选型&lt;/h3&gt;
&lt;h4 id=&#34;sql-vs-nosql&#34;&gt;SQL vs NoSQL&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;数据模型: schema vs schema-less(Key-Value Model, Document Model, Column-Family Model, Graph Model )&lt;/li&gt;
&lt;li&gt;扩展性: 垂直扩展 vs 水平扩展&lt;/li&gt;
&lt;li&gt;查询语言：SQL vs 无固定标准&lt;/li&gt;
&lt;li&gt;事务：ACID vs BASE&lt;/li&gt;
&lt;li&gt;性能：对Schema明确，查询模式固定的方式，SQL查询效率高&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/%e9%9d%a2%e8%af%95/SQLvsNoSQL.png&#34; alt=&#34;SQL vs NoSQL&#34;  /&gt;
&lt;/p&gt;
&lt;h4 id=&#34;具体系统设计blog&#34;&gt;具体系统设计Blog&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.algomaster.io/p/design-spotify-system-design-interview&#34;&gt;Design Spotify - System Design Interview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.algomaster.io/p/design-a-scalable-notification-service&#34;&gt;Design a Scalable Notification Service - System Design Interview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;参考资料&#34;&gt;参考资料&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/7397410962847039525&#34;&gt;麻烦不要再问我count(*)、count(1)、count(id)、count(name)之间的区别了&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.algomaster.io/p/system-design-how-to-avoid-single-point-of-failures&#34;&gt;System Design: How to Avoid Single Point of Failures?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.algomaster.io/p/sql-vs-nosql-7-key-differences&#34;&gt;SQL vs NoSQL - 7 Key Differences You Must Know&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;网络协议&#34;&gt;网络协议&lt;/h3&gt;
&lt;h4 id=&#34;dns-完整查询过程&#34;&gt;DNS 完整查询过程?&lt;/h4&gt;
&lt;p&gt;DNS 查询请求过程和域名缓存结合起来，完整查询过程👇：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git学习</title>
      <link>https://carlos19960601.github.io/posts/git%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Mon, 23 Sep 2024 15:23:57 +0800</pubDate>
      <guid>https://carlos19960601.github.io/posts/git%E5%AD%A6%E4%B9%A0/</guid>
      <description>&lt;h3 id=&#34;commit-消息提交规范&#34;&gt;commit 消息提交规范&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;feat: 新功能（feature）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于提交新功能。&lt;/li&gt;
&lt;li&gt;例如：feat: 增加用户注册功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fix: 修复 bug&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于提交 bug 修复。&lt;/li&gt;
&lt;li&gt;例如：fix: 修复登录页面崩溃的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;docs: 文档变更&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于提交仅文档相关的修改。&lt;/li&gt;
&lt;li&gt;例如：docs: 更新README文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;style: 代码风格变动（不影响代码逻辑）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于提交仅格式化、标点符号、空白等不影响代码运行的变更。&lt;/li&gt;
&lt;li&gt;例如：style: 删除多余的空行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;refactor: 代码重构（既不是新增功能也不是修复bug的代码更改）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于提交代码重构。&lt;/li&gt;
&lt;li&gt;例如：refactor: 重构用户验证逻辑&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;perf: 性能优化&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于提交提升性能的代码修改。&lt;/li&gt;
&lt;li&gt;例如：perf: 优化图片加载速度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;test: 添加或修改测试&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于提交测试相关的内容。&lt;/li&gt;
&lt;li&gt;例如：test: 增加用户模块的单元测试&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;chore: 杂项（构建过程或辅助工具的变动）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于提交构建过程、辅助工具等相关的内容修改。&lt;/li&gt;
&lt;li&gt;例如：chore: 更新依赖库&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;build: 构建系统或外部依赖项的变更&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于提交影响构建系统的更改。&lt;/li&gt;
&lt;li&gt;例如：build: 升级webpack到版本5&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ci: 持续集成配置的变更&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于提交CI配置文件和脚本的修改。&lt;/li&gt;
&lt;li&gt;例如：ci: 修改GitHub Actions配置文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;revert: 回滚&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于提交回滚之前的提交。&lt;/li&gt;
&lt;li&gt;例如：revert: 回滚feat: 增加用户注册功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Nextjs学习</title>
      <link>https://carlos19960601.github.io/posts/nextjs%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Thu, 12 Sep 2024 09:27:24 +0800</pubDate>
      <guid>https://carlos19960601.github.io/posts/nextjs%E5%AD%A6%E4%B9%A0/</guid>
      <description>&lt;h3 id=&#34;官方教程&#34;&gt;官方教程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nextjs.org/learn/dashboard-app&#34;&gt;Learn Next.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;服务端组件示例&#34;&gt;服务端组件示例&lt;/h3&gt;
&lt;p&gt;创建一个名为 app/api/posts/route.ts 的文件，用于定义路由处理程序：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;db&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;../../lib/db&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GET&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;Request&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;posts&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;db&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;post&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;findMany&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;JSON&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;stringify&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;posts&lt;/span&gt;), { &lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;200&lt;/span&gt; });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在页面组件中使用 &lt;code&gt;fetch&lt;/code&gt; 和 &lt;code&gt;getServerSideProps&lt;/code&gt; 获取数据并展示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// pages/posts/index.tsx
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;useEffect&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;useState&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;react&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getServerSideProps() {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/api/posts&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;props&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;posts&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PostsPage&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;posts&lt;/span&gt; }&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;posts&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;any&lt;/span&gt;[] }) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {&lt;span style=&#34;color:#a6e22e&#34;&gt;posts&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;post&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;post&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;}&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;h2&lt;/span&gt;&amp;gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;post&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt;}&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;h2&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;post&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;content&lt;/span&gt;}&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ))}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;should-i-use-swr-or-server-actions&#34;&gt;Should I use SWR or Server Actions?&lt;/h3&gt;
&lt;p&gt;No exact answer - but here is what I do:&lt;/p&gt;</description>
    </item>
    <item>
      <title>React笔记</title>
      <link>https://carlos19960601.github.io/posts/react%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 28 Aug 2024 14:43:33 +0800</pubDate>
      <guid>https://carlos19960601.github.io/posts/react%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;h2 id=&#34;twitterx-博主_georgemollerhttpsxcom_georgemoller的分享&#34;&gt;Twitter/X 博主&lt;a href=&#34;https://x.com/_georgemoller&#34;&gt;@_georgemoller&lt;/a&gt;的分享&lt;/h2&gt;
&lt;p&gt;主要记录Twitter博主&lt;a href=&#34;https://x.com/_georgemoller&#34;&gt;@_georgemoller&lt;/a&gt;分享的React技巧。对于我这种React小白很使用。于是搬运过来，并附上个人的一些理解。如有问题请邮箱本人，欢迎各位指正。&lt;/p&gt;
&lt;h3 id=&#34;solve-re-render-issues-with-composition&#34;&gt;Solve re-render issues with composition&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/React%e7%ac%94%e8%ae%b0/georgemoller_1c2c3b.gif&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;个人理解：功能单一，利用组合模式减少耦合，带来不必要的重新渲染&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;utility-types-for-enhanced-reusablity&#34;&gt;Utility Types For Enhanced Reusablity&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/React%e7%ac%94%e8%ae%b0/georgemoller_9378eb.gif&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;个人理解：Typescript Pick的使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;bad-use-case-for-usecallback&#34;&gt;Bad use case for useCallback&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/React%e7%ac%94%e8%ae%b0/georgemoller_ed1930.gif&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;useCallback 使用在复杂逻辑的组件，简单组件不会消耗造成性能问题时不必使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;intersection-types-to-extends-native-props-in-a-component&#34;&gt;Intersection types to extends native props in a component&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/React%e7%ac%94%e8%ae%b0/georgemoller_29194f.gif&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;h3 id=&#34;dont-listen-for-ref-changes-with-useeffect&#34;&gt;Don&amp;rsquo;t listen for ref changes with useEffect&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/React%e7%ac%94%e8%ae%b0/georgemoller_8216ce.gif&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本人曾经这么干过&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;useeffect-vs-uselayouteffect&#34;&gt;useEffect vs useLayoutEffect&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/React%e7%ac%94%e8%ae%b0/georgemoller_d587ed.gif&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;个人理解：useLayoutEffect在DOM更新后，浏览器绘制前执行。useEffect在DOM更新后，浏览器绘制后执行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;separation-of-concerns-in-react&#34;&gt;Separation of Concerns in React&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/React%e7%ac%94%e8%ae%b0/georgemoller_e8833e.gif&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;React中的关注点分离
这是一个重要的软件设计原则，在React开发中也同样适用。它指的是将代码按照不同的功能或责任进行划分和组织，使每个部分专注于特定的任务。在React中，这通常体现为:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将UI和逻辑分离&lt;/li&gt;
&lt;li&gt;将状态管理与渲染逻辑分离&lt;/li&gt;
&lt;li&gt;将可复用的逻辑抽离成自定义Hook&lt;/li&gt;
&lt;li&gt;将大型组件拆分成更小的、功能单一的组件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;遵循这一原则可以提高代码的可维护性、可读性和可重用性。&lt;/p&gt;</description>
    </item>
    <item>
      <title>开源项目学习推荐</title>
      <link>https://carlos19960601.github.io/posts/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0%E6%8E%A8%E8%8D%90/</link>
      <pubDate>Tue, 20 Aug 2024 10:04:54 +0800</pubDate>
      <guid>https://carlos19960601.github.io/posts/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0%E6%8E%A8%E8%8D%90/</guid>
      <description>&lt;h1 id=&#34;桌面客户端&#34;&gt;桌面客户端&lt;/h1&gt;
&lt;h2 id=&#34;taurihttpstauriapp&#34;&gt;&lt;a href=&#34;https://tauri.app/&#34;&gt;tauri&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;tauri 后端使用&lt;code&gt;rust&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/clash-verge-rev/clash-verge-rev&#34;&gt;clash-verge-rev&lt;/a&gt;: 基于Mihomo内核的翻墙客户端GUI
&lt;ul&gt;
&lt;li&gt;rust system-proxy的实现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;electronhttpswwwelectronforgeio&#34;&gt;&lt;a href=&#34;https://www.electronforge.io/&#34;&gt;Electron&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Electron 后端使用&lt;code&gt;node&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ZuodaoTech/everyone-can-use-english&#34;&gt;everyone-can-use-english&lt;/a&gt;: 英语学习软件
&lt;ul&gt;
&lt;li&gt;项目结构清晰，可以参考学习&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pompurin404/mihomo-party&#34;&gt;mihomo-party&lt;/a&gt;: Mihomo GUI&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;个人观点：tauri是webview+rust的实现，性能和打包的体积比较小，但是rust门槛高，tauri的生态可能比不上node。Electron是Chrome内核和NodeJS，入门门槛低，而且node的生态比较好。再不在乎包体积和性能的情况下，还是推荐Electron。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;移动客户端&#34;&gt;移动客户端&lt;/h1&gt;
&lt;h2 id=&#34;flutter&#34;&gt;Flutter&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/guozhigq/pilipala&#34;&gt;pilipala&lt;/a&gt;: 第三方bilibili客户端
&lt;ul&gt;
&lt;li&gt;使用Get做状态管理&lt;/li&gt;
&lt;li&gt;使用Hive做本地存储&lt;/li&gt;
&lt;li&gt;封装了dio网络请求&lt;/li&gt;
&lt;li&gt;基于media-kit实现视频播放&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jameskokoska/Cashew&#34;&gt;Cashew&lt;/a&gt;: An app created to help users manage a budget and purchases&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/AIYO77/flutter_cloud_music&#34;&gt;flutter_cloud_music&lt;/a&gt;: 还原网易云，flutter SDK版本较低，依赖包有些缺乏维护&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Davies-K/Taskez&#34;&gt;Taskez&lt;/a&gt;: A Productivity Mobile Application UI kit built with Flutter&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/abuanwar072/E-commerce-Complete-Flutter-UI&#34;&gt;E-commerce-Complete-Flutter-UI&lt;/a&gt;: 学习skleton&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;web前端&#34;&gt;Web前端&lt;/h1&gt;
&lt;h2 id=&#34;react&#34;&gt;React&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mayneyao/eidos&#34;&gt;eidos&lt;/a&gt;: 类似notion的软件
&lt;ul&gt;
&lt;li&gt;使用zustand做状态管理&lt;/li&gt;
&lt;li&gt;能够了解到PWA、serivce-woker、web-worker等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/AykutSarac/jsoncrack.com&#34;&gt;jsoncrack.com&lt;/a&gt;: json可视化展示&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/huanghanzhilian/c-shopping&#34;&gt;c-shopping&lt;/a&gt;: 基于&lt;code&gt;Next.js&lt;/code&gt;的全栈购物网站
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;mongoose&lt;/code&gt; 操作数据库&lt;/li&gt;
&lt;li&gt;学习 nextjs 的 Route Handlers 的使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/noodle-run/noodle&#34;&gt;noodle&lt;/a&gt;: Rethinking Student Productivity
&lt;ul&gt;
&lt;li&gt;学习在nextjs中使用trpc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;后端&#34;&gt;后端&lt;/h1&gt;
&lt;h2 id=&#34;golang&#34;&gt;Golang&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/MetaCubeX/mihomo&#34;&gt;mihomo&lt;/a&gt;: 翻墙软件，ClashMeta
&lt;ul&gt;
&lt;li&gt;能够学习到各种翻墙协议的内容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hibiken/asynq&#34;&gt;asynq&lt;/a&gt;: 基于Redis实现的分布式任务
&lt;ul&gt;
&lt;li&gt;redis lua脚本的使用&lt;/li&gt;
&lt;li&gt;golang 多个sever的启动与停止的实现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jech/galene&#34;&gt;galene&lt;/a&gt;: The Galène videoconference server
&lt;ul&gt;
&lt;li&gt;了解WebRTC相关的指示&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dgraph-io/badger&#34;&gt;badger&lt;/a&gt;: KV存储引擎
&lt;ul&gt;
&lt;li&gt;能够学习到LSM树的实现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;rust&#34;&gt;Rust&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ducaale/xh&#34;&gt;xh&lt;/a&gt;: 类似于&lt;code&gt;curl&lt;/code&gt;的命令行请求工具&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;数据分析与机器学习&#34;&gt;数据分析与机器学习&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ageron/handson-ml3&#34;&gt;handson-ml3&lt;/a&gt;: Hands-on Machine Learning with Scikit-Learn, Keras and TensorFlow (3rd edition)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/MLEveryday/100-Days-Of-ML-Code&#34;&gt;100-Days-Of-ML-Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>学习rust</title>
      <link>https://carlos19960601.github.io/posts/%E5%AD%A6%E4%B9%A0rust/</link>
      <pubDate>Thu, 25 Jul 2024 10:56:02 +0800</pubDate>
      <guid>https://carlos19960601.github.io/posts/%E5%AD%A6%E4%B9%A0rust/</guid>
      <description>&lt;h1 id=&#34;生命周期&#34;&gt;生命周期&lt;/h1&gt;
&lt;p&gt;rust自动推断变量的生命周期&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;longest&lt;/span&gt;(x: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;, y: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x.len() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; y.len() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        x
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是上面这段代码，rust无法推断出变量的生命周期。所以需要显示的标注生命周期。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;生命周期标注并不会改变任何引用的实际作用域&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://rustwiki.org/zh-CN/rust-by-example/index.html&#34;&gt;通过例子学 Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kaisery.github.io/trpl-zh-cn/title-page.html&#34;&gt;Rust 程序设计语言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://course.rs/about-book.html&#34;&gt;Rust语言圣经(&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>pipx使用</title>
      <link>https://carlos19960601.github.io/posts/pipx%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 24 Jul 2024 16:43:50 +0800</pubDate>
      <guid>https://carlos19960601.github.io/posts/pipx%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;h1 id=&#34;pipx是什么&#34;&gt;pipx是什么？&lt;/h1&gt;
&lt;p&gt;可以参加&lt;a href=&#34;https://github.com/pypa/pipx&#34;&gt;pipx&lt;/a&gt;的介绍。&lt;/p&gt;
&lt;p&gt;作为一个python小白，看了几遍，搜索了多篇博客了解&lt;code&gt;pipx&lt;/code&gt;是什么，仍然不懂是个啥。&lt;/p&gt;
&lt;p&gt;我在这仅说明一下我自己的理解。&lt;code&gt;pipx&lt;/code&gt;相当于一个安装工具。&lt;code&gt;python&lt;/code&gt;有自己的安装包的工具&lt;code&gt;pip&lt;/code&gt;。那么&lt;code&gt;pip&lt;/code&gt;和&lt;code&gt;pipx&lt;/code&gt;有什么区别呢？&lt;/p&gt;
&lt;p&gt;如果直接&lt;code&gt;pip&lt;/code&gt;安装包会安装在&lt;code&gt;python&lt;/code&gt;目录下的&lt;code&gt;site-packages&lt;/code&gt;下。由于这是个全局目录。如果在不同的项目里面，可能使用的各个包版本不同，可能会产生冲突。所以我们偏向使用一个干净的&lt;code&gt;site-package&lt;/code&gt;。其实&lt;code&gt;python&lt;/code&gt;提供了解决方案&amp;ndash;虚拟环境。&lt;code&gt;pipx&lt;/code&gt;只是基于这个概念，让使用者更好的使用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意 pipx 安装的是一些可执行的python应用。比如 poetry, jupyter等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;简单使用&#34;&gt;简单使用&lt;/h1&gt;
&lt;p&gt;安装pipx&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-shells&#34; data-lang=&#34;shells&#34;&gt;brew install pipx
pipx ensurepath
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安装jupyter&lt;/p&gt;
&lt;p&gt;可以使用&lt;code&gt;--python&lt;/code&gt;参数指定虚拟环境python&lt;code&gt;版本。如果不指定，使用的是你电脑上安装的最新的&lt;/code&gt;python`版本。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pipx install notebook --python&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;python3.11 --force
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行后, jupyter就会被安装在 &lt;code&gt;~/.local/pipx/venvs/notebook/bin&lt;/code&gt;。可以看到在&lt;code&gt;pipx&lt;/code&gt;的&lt;code&gt;venvs&lt;/code&gt;目录下面。也就说&lt;code&gt;pipx&lt;/code&gt;安装的每个应用都会有自己的虚拟环境。&lt;/p&gt;
&lt;p&gt;在写jupyter notebook的时候，我们可能需要&lt;code&gt;numpy&lt;/code&gt;，&lt;code&gt;panda&lt;/code&gt;等这些&lt;code&gt;python&lt;/code&gt;库。所以我们需要将这些安装到notebook的虚拟环境中，才能使用&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-shells&#34; data-lang=&#34;shells&#34;&gt;pipx inject notebook pandas numpy
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;问题记录&#34;&gt;问题记录&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;如果pipx inject的时候需要使用proxy。由于底层还是使用pip，所以需要通过PIP_*的环境变量传递proxy信息&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export PIP_PROXY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;http://127.0.0.1:7890 https_proxy&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;http://127.0.0.1:7890
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>正则表达式</title>
      <link>https://carlos19960601.github.io/posts/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Thu, 18 Jul 2024 14:47:42 +0800</pubDate>
      <guid>https://carlos19960601.github.io/posts/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>&lt;h1 id=&#34;元字符&#34;&gt;元字符&lt;/h1&gt;
&lt;p&gt;正则表达式主要依赖于元字符。&lt;/p&gt;
&lt;p&gt;元字符不代表他们本身的字面意思，他们都有特殊的含义。一些元字符写在方括号中的时候有一些特殊的意思。以下是一些元字符的介绍：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;元字符&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;.&lt;/td&gt;
          &lt;td&gt;句号匹配任意单个字符除了换行符。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;[ ]&lt;/td&gt;
          &lt;td&gt;字符种类。匹配方括号内的任意字符。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;[^ ]&lt;/td&gt;
          &lt;td&gt;否定的字符种类。匹配除了方括号里的任意字符&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;*&lt;/td&gt;
          &lt;td&gt;匹配&amp;gt;=0个重复的在*号之前的字符。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;+&lt;/td&gt;
          &lt;td&gt;匹配&amp;gt;=1个重复的+号前的字符。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;?&lt;/td&gt;
          &lt;td&gt;标记?之前的字符为可选.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;{n,m}&lt;/td&gt;
          &lt;td&gt;匹配num个大括号之前的字符或字符集 (n &amp;lt;= num &amp;lt;= m).&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;(xyz)&lt;/td&gt;
          &lt;td&gt;字符集，匹配与 xyz 完全相等的字符串.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;|&lt;/td&gt;
          &lt;td&gt;或运算符，匹配符号前或后的字符.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;\&lt;/td&gt;
          &lt;td&gt;转义字符,用于匹配一些保留的字符 &lt;!-- raw HTML omitted --&gt;[ ] ( ) { } . * + ? ^ $ \ |&lt;!-- raw HTML omitted --&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;^&lt;/td&gt;
          &lt;td&gt;从开始行开始匹配.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;$&lt;/td&gt;
          &lt;td&gt;从末端开始匹配.&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;简写字符集&#34;&gt;简写字符集&lt;/h1&gt;
&lt;p&gt;正则表达式提供一些常用的字符集简写。如下:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;简写&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;.&lt;/td&gt;
          &lt;td&gt;除换行符外的所有字符&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;\w&lt;/td&gt;
          &lt;td&gt;匹配所有字母数字，等同于 &lt;code&gt;[a-zA-Z0-9_]&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;\W&lt;/td&gt;
          &lt;td&gt;匹配所有非字母数字，即符号，等同于： &lt;code&gt;[^\w]&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;\d&lt;/td&gt;
          &lt;td&gt;匹配数字： &lt;code&gt;[0-9]&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;\D&lt;/td&gt;
          &lt;td&gt;匹配非数字： &lt;code&gt;[^\d]&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;\s&lt;/td&gt;
          &lt;td&gt;匹配所有空格字符，等同于： &lt;code&gt;[\t\n\f\r\p{Z}]&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;\S&lt;/td&gt;
          &lt;td&gt;匹配所有非空格字符： &lt;code&gt;[^\s]&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;\f&lt;/td&gt;
          &lt;td&gt;匹配一个换页符&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;\n&lt;/td&gt;
          &lt;td&gt;匹配一个换行符&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;\r&lt;/td&gt;
          &lt;td&gt;匹配一个回车符&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;\t&lt;/td&gt;
          &lt;td&gt;匹配一个制表符&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;\v&lt;/td&gt;
          &lt;td&gt;匹配一个垂直制表符&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;\p&lt;/td&gt;
          &lt;td&gt;匹配 CR/LF（等同于 &lt;code&gt;\r\n&lt;/code&gt;），用来匹配 DOS 行终止符&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;零宽度断言前后预查&#34;&gt;零宽度断言（前后预查）&lt;/h1&gt;
&lt;p&gt;先行断言和后发断言（合称 lookaround）都属于&lt;strong&gt;非捕获组&lt;/strong&gt;（用于匹配模式，但不包括在匹配列表中）。当我们需要一个模式的前面或后面有另一个特定的模式时，就可以使用它们。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker使用问题记录</title>
      <link>https://carlos19960601.github.io/posts/docker%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Sat, 13 Jul 2024 07:02:21 +0800</pubDate>
      <guid>https://carlos19960601.github.io/posts/docker%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</guid>
      <description>&lt;h1 id=&#34;安装docker&#34;&gt;安装Docker&lt;/h1&gt;
&lt;p&gt;参考&lt;a href=&#34;https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository&#34;&gt;Install using the apt repository&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Add Docker&amp;#39;s official GPG key:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get update
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install ca-certificates curl
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo install -m &lt;span style=&#34;color:#ae81ff&#34;&gt;0755&lt;/span&gt; -d /etc/apt/keyrings
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo chmod a+r /etc/apt/keyrings/docker.asc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Add the repository to Apt sources:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;deb [arch=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;dpkg --print-architecture&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;. /etc/os-release &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$VERSION_CODENAME&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; stable&amp;#34;&lt;/span&gt; | &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  sudo tee /etc/apt/sources.list.d/docker.list &amp;gt; /dev/null
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get update
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中在这步中，即使设置了Proxy&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export https_proxy&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;http://127.0.0.1:7890 http_proxy&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;http://127.0.0.1:7890 all_proxy&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;socks5://127.0.0.1:7890
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;好像并没有生效，我当时是直接下载&lt;code&gt;gpg&lt;/code&gt;文件，然后手动copy到&lt;code&gt;/etc/apt/keyrings/docker.asc&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>线性代数</title>
      <link>https://carlos19960601.github.io/posts/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/</link>
      <pubDate>Mon, 08 Jul 2024 22:53:36 +0800</pubDate>
      <guid>https://carlos19960601.github.io/posts/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/</guid>
      <description>&lt;p&gt;最近在看 &lt;a href=&#34;https://www.youtube.com/@3blue1brown&#34;&gt;3Blue1Brown&lt;/a&gt;的&lt;a href=&#34;https://www.youtube.com/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab&#34;&gt;Essence of linear algebra&lt;/a&gt;。预习一下大学知识。&lt;/p&gt;
&lt;h1 id=&#34;线性变换&#34;&gt;线性变换&lt;/h1&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/%e7%ba%bf%e6%80%a7%e4%bb%a3%e6%95%b0/Transform.png&#34; alt=&#34;Transform&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;线性变换矩阵可以看作是变换之后坐标系的 &lt;strong&gt;i&lt;/strong&gt;, &lt;strong&gt;j&lt;/strong&gt; 单位向量&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/%e7%ba%bf%e6%80%a7%e4%bb%a3%e6%95%b0/transform.gif&#34; alt=&#34;Transform&#34;  /&gt;
&lt;/p&gt;
&lt;h1 id=&#34;矩阵乘法&#34;&gt;矩阵乘法&lt;/h1&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/%e7%ba%bf%e6%80%a7%e4%bb%a3%e6%95%b0/Matrix%20multiplication.png&#34; alt=&#34;Matrix multiplication&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;矩阵乘法可以是看作是从右到左进行多次变化。&lt;/p&gt;
&lt;p&gt;同样的3维就是对3维空间进行变换。&lt;/p&gt;
&lt;h1 id=&#34;行列式&#34;&gt;行列式&lt;/h1&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/%e7%ba%bf%e6%80%a7%e4%bb%a3%e6%95%b0/%e8%a1%8c%e5%88%97%e5%bc%8f.png&#34; alt=&#34;行列式&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;行列式表示将面积缩放的大小&lt;/p&gt;
&lt;h1 id=&#34;点积&#34;&gt;点积&lt;/h1&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/%e7%ba%bf%e6%80%a7%e4%bb%a3%e6%95%b0/dot.gif&#34; alt=&#34;dot&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;在大学课堂上，老师说点积是向量长度和另外一个向量上在该向量方向上投影的积。但是一直不明白为什么。&lt;/p&gt;
&lt;p&gt;其实可以把其中一个向量看成一种变换。从二维到一维的转换。&lt;/p&gt;
&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab&#34;&gt;Essence of linear algebra&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>各种你懂的协议</title>
      <link>https://carlos19960601.github.io/posts/%E5%90%84%E7%A7%8D%E4%BD%A0%E6%87%82%E7%9A%84%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Sun, 07 Jul 2024 09:01:39 +0800</pubDate>
      <guid>https://carlos19960601.github.io/posts/%E5%90%84%E7%A7%8D%E4%BD%A0%E6%87%82%E7%9A%84%E5%8D%8F%E8%AE%AE/</guid>
      <description>&lt;h1 id=&#34;socks5协议&#34;&gt;Socks5协议&lt;/h1&gt;
&lt;p&gt;具体协议过程参考&lt;a href=&#34;https://wiyi.org/socks5-protocol-in-deep.html#25-%E5%8D%8F%E8%AE%AE%E7%BB%86%E8%8A%82&#34;&gt;理解socks5协议的工作过程和协议细节&lt;/a&gt;。这篇文章主要是通过代码去理解socks5协议。&lt;/p&gt;
&lt;h2 id=&#34;实验条件介绍&#34;&gt;实验条件介绍&lt;/h2&gt;
&lt;p&gt;命令行设置proxy&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export https_proxy&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;socks5://127.0.0.1:7891 http_proxy&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;socks5://127.0.0.1:7891
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后通过curl发起http请求。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl www.baidu.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这时候，curl这个命令就会走socks协议，并封装socks协议数据发送给&lt;code&gt;socks5://127.0.0.1:7891&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;协商阶段&#34;&gt;协商阶段&lt;/h2&gt;
&lt;p&gt;根据参考资料，握手阶段-协商阶段发送的数据格式如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+----+----------+----------+
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|VER | NMETHODS | METHODS  |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+----+----------+----------+
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| 1  |    1     | 1 to 255 |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+----+----------+----------+
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#上方的数字表示字节数，下面的表格同理，不再赘述
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;VER: 协议版本，socks5为0x05&lt;/p&gt;
&lt;p&gt;NMETHODS: 支持认证的方法数量&lt;/p&gt;
&lt;p&gt;METHODS: 对应NMETHODS，NMETHODS的值为多少，METHODS就有多少个字节。RFC预定义了一些值的含义，内容如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;X’00’ NO AUTHENTICATION REQUIRED&lt;/li&gt;
&lt;li&gt;X’01’ GSSAPI&lt;/li&gt;
&lt;li&gt;X’02’ USERNAME/PASSWORD&lt;/li&gt;
&lt;li&gt;X’03’ to X’7F’ IANA ASSIGNED&lt;/li&gt;
&lt;li&gt;X’80’ to X’FE’ RESERVED FOR PRIVATE METHODS&lt;/li&gt;
&lt;li&gt;X’FF’ NO ACCEPTABLE METHODS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么socks服务端接受到请求时，需要解析内容，选中一个METHOD返回给客户端，格式如下:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;+----+--------+
|VER | METHOD |
+----+--------+
| 1  |   1    |
+----+--------+
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ServerHandshake&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;rw&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;net&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Conn&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;authenticator&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;auth&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Authenticator&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;addr&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Addr&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;command&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Command&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;io&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ReadFull&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;rw&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[:&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]); &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;nmethods&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;io&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ReadFull&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;rw&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;buf&lt;/span&gt;[:&lt;span style=&#34;color:#a6e22e&#34;&gt;nmethods&lt;/span&gt;]); &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// 返回信息,需要认证
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;authenticator&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;// 版本和认证方法
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;rw&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Write&lt;/span&gt;([]&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}); &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面代码逻辑就是处理这个过程。代码中固定返回的是&lt;code&gt;X’02’ USERNAME/PASSWORD&lt;/code&gt;这种认证方式。&lt;/p&gt;</description>
    </item>
    <item>
      <title>新机必备软件</title>
      <link>https://carlos19960601.github.io/posts/%E6%96%B0%E6%9C%BA%E5%BF%85%E5%A4%87%E8%BD%AF%E4%BB%B6/</link>
      <pubDate>Sat, 06 Jul 2024 08:42:02 +0800</pubDate>
      <guid>https://carlos19960601.github.io/posts/%E6%96%B0%E6%9C%BA%E5%BF%85%E5%A4%87%E8%BD%AF%E4%BB%B6/</guid>
      <description>&lt;h1 id=&#34;开发工具&#34;&gt;开发工具&lt;/h1&gt;
&lt;p&gt;科学上网&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Clash.Verge&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Apple M芯片：&lt;a href=&#34;https://carlos19960601.github.io/%E6%96%B0%E6%9C%BA%E5%BF%85%E5%A4%87%E8%BD%AF%E4%BB%B6/Clash.Verge_1.7.2_aarch64.dmg&#34;&gt;Clash.Verge_1.7.2_aarch64.dmg&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Intel芯片：&lt;a href=&#34;https://carlos19960601.github.io/%E6%96%B0%E6%9C%BA%E5%BF%85%E5%A4%87%E8%BD%AF%E4%BB%B6/Clash.Verge_1.7.2_x64.dmg&#34;&gt;Clash.Verge_1.7.2_x64.dmg&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ClashX&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://carlos19960601.github.io/%E6%96%B0%E6%9C%BA%E5%BF%85%E5%A4%87%E8%BD%AF%E4%BB%B6/ClashX.dmg&#34;&gt;ClashX.dmg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ClashX Pro&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://carlos19960601.github.io/%E6%96%B0%E6%9C%BA%E5%BF%85%E5%A4%87%E8%BD%AF%E4%BB%B6/ClashXPro.dmg&#34;&gt;ClashX Pro&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/bin/bash -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过&lt;code&gt;Homebrew&lt;/code&gt;安装的&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;brew install git go hugo git-lfs rust bruno sequel-ace node pnpm
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;brew install --cask warp orbstack flutter losslesscut obsidian google-chrome
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;vscode&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.android.com/studio?hl=zh-cn&#34;&gt;Android Studio&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dash&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;设计&#34;&gt;设计&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Billfish&lt;/li&gt;
&lt;li&gt;AceMovi Video Editor&lt;/li&gt;
&lt;li&gt;Amadine&lt;/li&gt;
&lt;li&gt;Sip&lt;/li&gt;
&lt;li&gt;Pixelmator Pro&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;其他&#34;&gt;其他&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://telegram.org/&#34;&gt;Telegram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;DaisyDisk&lt;/li&gt;
&lt;li&gt;Permute 3&lt;/li&gt;
&lt;li&gt;IINA&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;brew install --cask iina
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Google Chrome&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>怎么写Makefile</title>
      <link>https://carlos19960601.github.io/posts/%E6%80%8E%E4%B9%88%E5%86%99makefile/</link>
      <pubDate>Mon, 01 Jul 2024 17:11:40 +0800</pubDate>
      <guid>https://carlos19960601.github.io/posts/%E6%80%8E%E4%B9%88%E5%86%99makefile/</guid>
      <description>&lt;h2 id=&#34;基本语法&#34;&gt;基本语法&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;targets&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; prerequisites
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	command
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	command
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	command
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;变量&#34;&gt;变量&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;声明变量&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NAME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ClashV
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;BINDIR&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;bin
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;使用&lt;code&gt;$()&lt;/code&gt;来引用变量&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PLATFORM_LIST &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	darwin-amd64 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;	darwin-amd64-compatible &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;all-arch&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;PLATFORM_LIST&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;自动变量&#34;&gt;自动变量&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;$@&lt;/code&gt;: 表示target&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;darwin-amd64&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	GOARCH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;amd64 GOOS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;darwin &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;GOBUILD&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; -o &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;BINDIR&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;/&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;NAME&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;-$@
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;条件判断&#34;&gt;条件判断&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;ifeq&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;BRANCH&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,Alpha)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;VERSION&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;alpha-&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;shell git rev-parse --short HEAD&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;ifeq&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;BRANCH&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,Beta)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;VERSION&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;beta-&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;shell git rev-parse --short HEAD&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;ifeq&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;BRANCH&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;VERSION&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;shell git describe --tags&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;VERSION&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;shell git rev-parse --short HEAD&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;endif&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;函数&#34;&gt;函数&lt;/h2&gt;
&lt;h3 id=&#34;shell&#34;&gt;shell&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;BRANCH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;shell git branch --show-current&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;相关链接&#34;&gt;相关链接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://makefiletutorial.com/&#34;&gt;Makefile Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>开源项目推荐【持续更新】</title>
      <link>https://carlos19960601.github.io/posts/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E6%8E%A8%E8%8D%90/</link>
      <pubDate>Mon, 01 Jul 2024 16:53:15 +0800</pubDate>
      <guid>https://carlos19960601.github.io/posts/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E6%8E%A8%E8%8D%90/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Bowen7/react-rough-fiber&#34;&gt;react-rough-fiber&lt;/a&gt;: 渲染手绘风 SVG 的 React 渲染器，可以轻松把 SVG 转换成手绘风图片&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/%e5%bc%80%e6%ba%90%e9%a1%b9%e7%9b%ae%e6%8e%a8%e8%8d%90/react-rough-fiber.png&#34; alt=&#34;react-rough-fiber&#34;  /&gt;
&lt;/p&gt;</description>
    </item>
    <item>
      <title>工具推荐【持续更新】</title>
      <link>https://carlos19960601.github.io/posts/%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/</link>
      <pubDate>Mon, 01 Jul 2024 16:52:23 +0800</pubDate>
      <guid>https://carlos19960601.github.io/posts/%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.happyhues.co/&#34;&gt;happyhues&lt;/a&gt;: 网站颜色搭配神器
&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/%e5%b7%a5%e5%85%b7%e6%8e%a8%e8%8d%90/happyhues.png&#34; alt=&#34;&#34;  /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cobalt.tools/&#34;&gt;cobalt&lt;/a&gt;: 视频下载&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.indiehackers.site/&#34;&gt;indiehackers&lt;/a&gt;: 独立开发导航站&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://openalternative.co/&#34;&gt;openalternative&lt;/a&gt;: 查找平替软件&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>缓存驱逐策略</title>
      <link>https://carlos19960601.github.io/posts/%E7%BC%93%E5%AD%98%E9%A9%B1%E9%80%90%E7%AD%96%E7%95%A5/</link>
      <pubDate>Wed, 26 Jun 2024 22:54:31 +0800</pubDate>
      <guid>https://carlos19960601.github.io/posts/%E7%BC%93%E5%AD%98%E9%A9%B1%E9%80%90%E7%AD%96%E7%95%A5/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/%e7%bc%93%e5%ad%98%e9%a9%b1%e9%80%90%e7%ad%96%e7%95%a5/Cache%20Eviction%20Strtegies.gif&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Least Recently Used(LRU)&lt;/strong&gt;: 删除最旧的数据。基本假设是最近访问的数据可能很快会再次被需要。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Most Recently Used(MRU)&lt;/strong&gt;: 与&lt;strong&gt;LRU&lt;/strong&gt;相反，删除最新的数据。常用于流处理或批处理平台，这些平台一旦使用数据就不太可能再次需要。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Least Frequently Used(LFU)&lt;/strong&gt;: 删除使用最少的数据。虽然它是一种比 &lt;strong&gt;LRU&lt;/strong&gt; 更准确的方法，但它需要一种机制来记录数据访问的频率，这增加了复杂性。它通常与 &lt;strong&gt;LRU&lt;/strong&gt; 等策略配合使用，以降低缓存过时数据的风险。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Time-To-Live (TTL)&lt;/strong&gt;：数据在预设的时间段有效。常用在会话数据中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Two-tiered caching&lt;/strong&gt;两层缓存提供了一种更复杂的方法。可以在速度和成本之间取得平衡。在此设计中，数据被分为快速、昂贵的层（用于流行数据）和较慢、经济的层（用于较少访问的数据）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述五种策略是最流行的缓存方法。还有其他一些策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;先进先出（FIFO&lt;/strong&gt;）：最旧的数据首先被删除。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;随机替换（RR）&lt;/strong&gt;：随机选择要删除的数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自适应替换缓存 (ARC)&lt;/strong&gt;：使用自调整算法跟踪新近度和频率来确定首先删除哪些数据。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>atomic.Value存储interface的问题</title>
      <link>https://carlos19960601.github.io/posts/atomic.value%E5%AD%98%E5%82%A8interface%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 26 Jun 2024 17:39:28 +0800</pubDate>
      <guid>https://carlos19960601.github.io/posts/atomic.value%E5%AD%98%E5%82%A8interface%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;p&gt;先看这段代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;io&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sync/atomic&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;atomic&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ProtocolError&lt;/span&gt;{}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Store&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;io&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Store&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行后会报错 &lt;code&gt;panic: sync/atomic: store of inconsistently typed value into Value&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;原因是&lt;code&gt;atomic.Value.Store&lt;/code&gt;需要类型是一致的。在这里&lt;code&gt;err&lt;/code&gt;类型发生了变化，虽然他们都是&lt;code&gt;error&lt;/code&gt;接口类型。具体参考&lt;a href=&#34;https://github.com/golang/go/issues/22550&#34;&gt;Issues#22550&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;怎么解决？包装一层就能运行了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tValue&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;any&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;atomic&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ProtocolError&lt;/span&gt;{}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Store&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;tValue&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;]{&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;io&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Store&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;tValue&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;]{&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>MySQL存储与索引原理分享</title>
      <link>https://carlos19960601.github.io/posts/mysql%E5%AD%98%E5%82%A8%E4%B8%8E%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86%E5%88%86%E4%BA%AB/</link>
      <pubDate>Fri, 30 Jul 2021 00:45:17 +0800</pubDate>
      <guid>https://carlos19960601.github.io/posts/mysql%E5%AD%98%E5%82%A8%E4%B8%8E%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86%E5%88%86%E4%BA%AB/</guid>
      <description>&lt;p&gt;很早之前做的一次分享，下面是PPT内容&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/MySQL%e5%ad%98%e5%82%a8%e4%b8%8e%e7%b4%a2%e5%bc%95%e5%8e%9f%e7%90%86/01.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/MySQL%e5%ad%98%e5%82%a8%e4%b8%8e%e7%b4%a2%e5%bc%95%e5%8e%9f%e7%90%86/02.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/MySQL%e5%ad%98%e5%82%a8%e4%b8%8e%e7%b4%a2%e5%bc%95%e5%8e%9f%e7%90%86/03.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/MySQL%e5%ad%98%e5%82%a8%e4%b8%8e%e7%b4%a2%e5%bc%95%e5%8e%9f%e7%90%86/04.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/MySQL%e5%ad%98%e5%82%a8%e4%b8%8e%e7%b4%a2%e5%bc%95%e5%8e%9f%e7%90%86/05.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/MySQL%e5%ad%98%e5%82%a8%e4%b8%8e%e7%b4%a2%e5%bc%95%e5%8e%9f%e7%90%86/06.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/MySQL%e5%ad%98%e5%82%a8%e4%b8%8e%e7%b4%a2%e5%bc%95%e5%8e%9f%e7%90%86/07.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/MySQL%e5%ad%98%e5%82%a8%e4%b8%8e%e7%b4%a2%e5%bc%95%e5%8e%9f%e7%90%86/08.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/MySQL%e5%ad%98%e5%82%a8%e4%b8%8e%e7%b4%a2%e5%bc%95%e5%8e%9f%e7%90%86/09.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/MySQL%e5%ad%98%e5%82%a8%e4%b8%8e%e7%b4%a2%e5%bc%95%e5%8e%9f%e7%90%86/10.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/MySQL%e5%ad%98%e5%82%a8%e4%b8%8e%e7%b4%a2%e5%bc%95%e5%8e%9f%e7%90%86/11.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/MySQL%e5%ad%98%e5%82%a8%e4%b8%8e%e7%b4%a2%e5%bc%95%e5%8e%9f%e7%90%86/12.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/MySQL%e5%ad%98%e5%82%a8%e4%b8%8e%e7%b4%a2%e5%bc%95%e5%8e%9f%e7%90%86/13.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/MySQL%e5%ad%98%e5%82%a8%e4%b8%8e%e7%b4%a2%e5%bc%95%e5%8e%9f%e7%90%86/14.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/MySQL%e5%ad%98%e5%82%a8%e4%b8%8e%e7%b4%a2%e5%bc%95%e5%8e%9f%e7%90%86/15.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/MySQL%e5%ad%98%e5%82%a8%e4%b8%8e%e7%b4%a2%e5%bc%95%e5%8e%9f%e7%90%86/16.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/MySQL%e5%ad%98%e5%82%a8%e4%b8%8e%e7%b4%a2%e5%bc%95%e5%8e%9f%e7%90%86/17.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/MySQL%e5%ad%98%e5%82%a8%e4%b8%8e%e7%b4%a2%e5%bc%95%e5%8e%9f%e7%90%86/18.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/MySQL%e5%ad%98%e5%82%a8%e4%b8%8e%e7%b4%a2%e5%bc%95%e5%8e%9f%e7%90%86/19.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/MySQL%e5%ad%98%e5%82%a8%e4%b8%8e%e7%b4%a2%e5%bc%95%e5%8e%9f%e7%90%86/20.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/MySQL%e5%ad%98%e5%82%a8%e4%b8%8e%e7%b4%a2%e5%bc%95%e5%8e%9f%e7%90%86/21.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/MySQL%e5%ad%98%e5%82%a8%e4%b8%8e%e7%b4%a2%e5%bc%95%e5%8e%9f%e7%90%86/22.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/MySQL%e5%ad%98%e5%82%a8%e4%b8%8e%e7%b4%a2%e5%bc%95%e5%8e%9f%e7%90%86/23.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/MySQL%e5%ad%98%e5%82%a8%e4%b8%8e%e7%b4%a2%e5%bc%95%e5%8e%9f%e7%90%86/24.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/MySQL%e5%ad%98%e5%82%a8%e4%b8%8e%e7%b4%a2%e5%bc%95%e5%8e%9f%e7%90%86/25.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/MySQL%e5%ad%98%e5%82%a8%e4%b8%8e%e7%b4%a2%e5%bc%95%e5%8e%9f%e7%90%86/26.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/MySQL%e5%ad%98%e5%82%a8%e4%b8%8e%e7%b4%a2%e5%bc%95%e5%8e%9f%e7%90%86/27.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/MySQL%e5%ad%98%e5%82%a8%e4%b8%8e%e7%b4%a2%e5%bc%95%e5%8e%9f%e7%90%86/28.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/MySQL%e5%ad%98%e5%82%a8%e4%b8%8e%e7%b4%a2%e5%bc%95%e5%8e%9f%e7%90%86/29.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/MySQL%e5%ad%98%e5%82%a8%e4%b8%8e%e7%b4%a2%e5%bc%95%e5%8e%9f%e7%90%86/30.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/MySQL%e5%ad%98%e5%82%a8%e4%b8%8e%e7%b4%a2%e5%bc%95%e5%8e%9f%e7%90%86/31.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/MySQL%e5%ad%98%e5%82%a8%e4%b8%8e%e7%b4%a2%e5%bc%95%e5%8e%9f%e7%90%86/32.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/MySQL%e5%ad%98%e5%82%a8%e4%b8%8e%e7%b4%a2%e5%bc%95%e5%8e%9f%e7%90%86/33.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/MySQL%e5%ad%98%e5%82%a8%e4%b8%8e%e7%b4%a2%e5%bc%95%e5%8e%9f%e7%90%86/34.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/MySQL%e5%ad%98%e5%82%a8%e4%b8%8e%e7%b4%a2%e5%bc%95%e5%8e%9f%e7%90%86/35.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;</description>
    </item>
    <item>
      <title>关于Golang GC问题的思考</title>
      <link>https://carlos19960601.github.io/posts/%E5%85%B3%E4%BA%8Egolang-gc%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E8%80%83/</link>
      <pubDate>Tue, 27 Jul 2021 23:45:51 +0800</pubDate>
      <guid>https://carlos19960601.github.io/posts/%E5%85%B3%E4%BA%8Egolang-gc%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%9D%E8%80%83/</guid>
      <description>&lt;p&gt;由于GC复杂，我也没有仔细研究过GC的源码，所以只能站在巨人的肩上学习，如果想了解GC的具体实现请移步文末的参考资料。本文只是记录我在阅读完大佬文章中自己的一些问题与思考，可能有一些不对的地方。欢迎大家一起讨论。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Timer源码阅读分享</title>
      <link>https://carlos19960601.github.io/posts/timer%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E5%88%86%E4%BA%AB/</link>
      <pubDate>Sat, 10 Jul 2021 01:09:15 +0800</pubDate>
      <guid>https://carlos19960601.github.io/posts/timer%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E5%88%86%E4%BA%AB/</guid>
      <description>&lt;p&gt;这是在小团队里面的一次分享，以下是PPT内容&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/timer%e6%ba%90%e7%a0%81%e9%98%85%e8%af%bb%e5%88%86%e4%ba%ab/01.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/timer%e6%ba%90%e7%a0%81%e9%98%85%e8%af%bb%e5%88%86%e4%ba%ab/02.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/timer%e6%ba%90%e7%a0%81%e9%98%85%e8%af%bb%e5%88%86%e4%ba%ab/03.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/timer%e6%ba%90%e7%a0%81%e9%98%85%e8%af%bb%e5%88%86%e4%ba%ab/04.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/timer%e6%ba%90%e7%a0%81%e9%98%85%e8%af%bb%e5%88%86%e4%ba%ab/05.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/timer%e6%ba%90%e7%a0%81%e9%98%85%e8%af%bb%e5%88%86%e4%ba%ab/06.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/timer%e6%ba%90%e7%a0%81%e9%98%85%e8%af%bb%e5%88%86%e4%ba%ab/07.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/timer%e6%ba%90%e7%a0%81%e9%98%85%e8%af%bb%e5%88%86%e4%ba%ab/08.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/timer%e6%ba%90%e7%a0%81%e9%98%85%e8%af%bb%e5%88%86%e4%ba%ab/10.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/timer%e6%ba%90%e7%a0%81%e9%98%85%e8%af%bb%e5%88%86%e4%ba%ab/11.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/timer%e6%ba%90%e7%a0%81%e9%98%85%e8%af%bb%e5%88%86%e4%ba%ab/12.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/timer%e6%ba%90%e7%a0%81%e9%98%85%e8%af%bb%e5%88%86%e4%ba%ab/13.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/timer%e6%ba%90%e7%a0%81%e9%98%85%e8%af%bb%e5%88%86%e4%ba%ab/14.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/timer%e6%ba%90%e7%a0%81%e9%98%85%e8%af%bb%e5%88%86%e4%ba%ab/15.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/timer%e6%ba%90%e7%a0%81%e9%98%85%e8%af%bb%e5%88%86%e4%ba%ab/16.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/timer%e6%ba%90%e7%a0%81%e9%98%85%e8%af%bb%e5%88%86%e4%ba%ab/17.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/timer%e6%ba%90%e7%a0%81%e9%98%85%e8%af%bb%e5%88%86%e4%ba%ab/18.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/timer%e6%ba%90%e7%a0%81%e9%98%85%e8%af%bb%e5%88%86%e4%ba%ab/19.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/timer%e6%ba%90%e7%a0%81%e9%98%85%e8%af%bb%e5%88%86%e4%ba%ab/20.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/timer%e6%ba%90%e7%a0%81%e9%98%85%e8%af%bb%e5%88%86%e4%ba%ab/21.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/timer%e6%ba%90%e7%a0%81%e9%98%85%e8%af%bb%e5%88%86%e4%ba%ab/22.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/timer%e6%ba%90%e7%a0%81%e9%98%85%e8%af%bb%e5%88%86%e4%ba%ab/23.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/timer%e6%ba%90%e7%a0%81%e9%98%85%e8%af%bb%e5%88%86%e4%ba%ab/24.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/timer%e6%ba%90%e7%a0%81%e9%98%85%e8%af%bb%e5%88%86%e4%ba%ab/25.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;</description>
    </item>
    <item>
      <title>Timer源码阅读</title>
      <link>https://carlos19960601.github.io/posts/timer%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</link>
      <pubDate>Thu, 22 Apr 2021 22:50:29 +0800</pubDate>
      <guid>https://carlos19960601.github.io/posts/timer%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</guid>
      <description>&lt;p&gt;根据&lt;a href=&#34;https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-timer/&#34;&gt;6.3 计时器&lt;/a&gt;中的描述，Golang Timer的设计经历了如下阶段：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go 1.9 版本之前，所有的计时器由全局唯一的四叉堆维护；&lt;/li&gt;
&lt;li&gt;Go 1.10 ~ 1.13，全局使用 64 个四叉堆维护全部的计时器，每个处理器（P）创建的计时器会由对应的四叉堆维护；&lt;/li&gt;
&lt;li&gt;Go 1.14 版本之后，每个处理器单独管理计时器并通过网络轮询器触发；&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Go 1.9 版本之前由于使用全局的四叉堆，在多核情况下会出现锁竞争导致性能问题&lt;/li&gt;
&lt;li&gt;Go 1.10 ~ 1.13使用了64个四叉堆，有每个P来维护对应的四叉堆，相当于将锁的粒度减小，但是当timer在未到时间和到时间需要执行进行切换的时候，会发生P和M的绑定和解绑，尤其是当timer触发时间间隔比较小的情况下，会导致CPU占用过高，M/P切换的开销增加(TODO  为什么会发生P和M的绑定和解绑)&lt;/li&gt;
&lt;li&gt;Go 1.14 版本后每个P管理计时器四叉堆，由网络轮询器和调度器进行触发&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我使用的是Go 1.16的版本进行分析&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java线程池</title>
      <link>https://carlos19960601.github.io/posts/java%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link>
      <pubDate>Wed, 16 Dec 2020 12:55:05 +0800</pubDate>
      <guid>https://carlos19960601.github.io/posts/java%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid>
      <description>&lt;h4 id=&#34;线程池是什么&#34;&gt;线程池是什么？&lt;/h4&gt;
&lt;p&gt;线程池用于多线程处理中，它可以根据系统的情况，可以有效控制线程执行的数量，优化运行效果。线程池做的工作主要是控制运行的线程的数量，处理过程中将任务放入队列，然后在线程创建后启动这些任务，如果线程数量超过了最大数量超出数量的线程排队等候，等其它线程执行完毕，再从队列中取出任务来执行。&lt;/p&gt;</description>
    </item>
    <item>
      <title>再回首CMS垃圾回收</title>
      <link>https://carlos19960601.github.io/posts/%E5%86%8D%E5%9B%9E%E9%A6%96cms%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</link>
      <pubDate>Fri, 27 Nov 2020 21:50:29 +0800</pubDate>
      <guid>https://carlos19960601.github.io/posts/%E5%86%8D%E5%9B%9E%E9%A6%96cms%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</guid>
      <description>&lt;h3 id=&#34;前言&#34;&gt;前言&lt;/h3&gt;
&lt;p&gt;之前学习JVM垃圾回收时，主要是过了一遍垃圾收集算法，比如复制算法，标记-清除算法，标记-整理算法，在此基础上可以增加分代，每代采取不同的回收算法，以提高整体的分配和回收效率。然后过了一遍JVM中的垃圾收集器，比如Serial、Parallel Scavenge、Parallel New、CMS、G1等。&lt;/p&gt;
&lt;p&gt;自认为垃圾收集就是根据GC Root标记所有可达的对象，然后把所有没有标记的对象清除就ok了。是不是很简单。事实上垃圾收集也就是这么一回事，但是很多时候说起来简单，做起来却会出现很多问题。这篇文章就是记录我对CMS垃圾收集器的一些疑问并学习的过程。&lt;/p&gt;
&lt;p&gt;首先看一下CMS的整体流程(具体每个流程的详情就自行了解吧)&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/%e5%86%8d%e5%9b%9e%e9%a6%96CMS%e5%9e%83%e5%9c%be%e5%9b%9e%e6%94%b6/CMS%e6%b5%81%e7%a8%8b.png&#34; alt=&#34;CMS流程&#34;  /&gt;
&lt;/p&gt;
&lt;h3 id=&#34;如何进行标记&#34;&gt;如何进行标记？&lt;/h3&gt;
&lt;p&gt;最近在看Golang的GC算法实现，里面用到了三色标记法，但是在我的知识库中对三色标记法有这个概念，是的，我只知道这个概念，不知道三色标记法是怎么一个流程，也不知道三色标记法在GC中怎么与运行的。于是就开始了我的探险之旅。&lt;/p&gt;
&lt;p&gt;在搜索了一下三色标记法（具体可以看一下文末参考文档中&lt;a href=&#34;https://www.jianshu.com/p/12544c0ad5c1&#34;&gt;三色标记法与读写屏障&lt;/a&gt;了解详情）后，发现现代追踪式（可达性分析）的垃圾回收器几乎都借鉴了三色标记的算法思想，CMS垃圾收集器也不例外。&lt;/p&gt;
&lt;h3 id=&#34;gc-root有哪些&#34;&gt;GC Root有哪些？&lt;/h3&gt;
&lt;p&gt;我们知道怎么进行标记了，但最初标记的时候需要一些根据才行啊，这些根据就是我们收的GC Root。GC Root有哪些？网上有很多的答案，我的理解就是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当前活跃调用栈中的指向对象的引用&lt;/li&gt;
&lt;li&gt;一些不会发生改变的数据所指向的引用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里我使用的是引用，而不是对象，因为R大是这样说的（具体的问题见参考文档&lt;a href=&#34;https://www.zhihu.com/question/53613423/answer/135743258&#34;&gt;java的gc为什么要分代？&lt;/a&gt;）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所谓“GC roots”，或者说tracing GC的“根集合”，就是&lt;strong&gt;一组必须活跃的引用&lt;/strong&gt;。
例如说，这些引用可能包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有Java线程当前活跃的栈帧里指向GC堆里的对象的引用；换句话说，当前所有正在被调用的方法的引用类型的参数/局部变量/临时值。&lt;/li&gt;
&lt;li&gt;VM的一些静态数据结构里指向GC堆里的对象的引用，例如说HotSpot VM里的Universe里有很多这样的引用。&lt;/li&gt;
&lt;li&gt;JNI handles，包括global handles和local handles&lt;/li&gt;
&lt;li&gt;（看情况）所有当前被加载的Java类&lt;/li&gt;
&lt;li&gt;（看情况）Java类的引用类型静态变量&lt;/li&gt;
&lt;li&gt;（看情况）Java类的运行时常量池里的引用类型常量（String或Class类型）&lt;/li&gt;
&lt;li&gt;（看情况）String常量池（StringTable）里的引用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意，是一组必须活跃的&lt;strong&gt;引用&lt;/strong&gt;，不是对象。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现在知道了GC Root，但是我们都知道有分代的概念，新生代的gc和老年的代的gc回收的区域是不一样，那么这里的GC Root是不是应该不一样呢？肯定是不一样的。&lt;/p&gt;
&lt;p&gt;首先看一下&lt;strong&gt;新生代的GC&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;新生代的区域一般都比较小，而且对象的存活率都比较低，所以按照前面说的GC Root在新生代的区域扫描就行了。但是会有一个问题？老年代存在引用新生代对象的可能啊？如果只扫描新生代的区域，会漏掉被老年代引用的对象，这些对象就会被清除掉，这是不允许的。&lt;/p&gt;
&lt;p&gt;如果这样的话，那是不是扫描一下老年代的对象，看是否引用新生代的对象是不是就ok了？嗯这么做肯定是ok的，但是老年代一般很大，而且存活的对象很多，会导致扫描占用很长的时间。那这个问题如何解？JVM是如何避免Minor GC时扫描全堆的？&lt;/p&gt;
&lt;p&gt;经过统计信息显示，老年代持有新生代对象引用的情况不足1%，根据这一特性JVM引入了卡表（card table）来实现这一目的。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/%e5%86%8d%e5%9b%9e%e9%a6%96CMS%e5%9e%83%e5%9c%be%e5%9b%9e%e6%94%b6/CardTable.png&#34; alt=&#34;CardTable&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;卡表&lt;/strong&gt;的具体策略是将老年代的空间分成大小为512B的若干张卡（card）。卡表本身是单字节数组，数组中的每个元素对应着一张卡，当发生老年代引用新生代时，虚拟机将该卡对应的卡表元素设置为适当的值。如上图所示，卡表3被标记为脏（卡表还有另外的作用，标识并发标记阶段哪些块被修改过），之后Minor GC时通过扫描卡表就可以很快的识别哪些卡中存在老年代指向新生代的引用。这样虚拟机通过空间换时间的方式，避免了全堆扫描。&lt;/p&gt;
&lt;p&gt;所以新年代GC的GC Root包含2部分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新生代中满足GC Root定义的对象&lt;/li&gt;
&lt;li&gt;卡表中老年代引用新生代的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;老年代的GC&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;前面我们说了新生代的gc，我们以同样的思路来看看老年代的gc，老年代的GC Root如何来标记呢？只扫描老年代可以吗？当然是不行的，因为新生代中也可能存在老年代对象的引用，好在新生代并不大，所以老年代GC的时候还需要扫描一遍新生代。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://carlos19960601.github.io/%e5%86%8d%e5%9b%9e%e9%a6%96CMS%e5%9e%83%e5%9c%be%e5%9b%9e%e6%94%b6/%e6%96%b0%e7%94%9f%e4%bb%a3GC%e7%9a%84Root.png&#34; alt=&#34;新生代GC的Root&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;所以老年代GC的GC Root包含2部分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;老生代中满足GC Root定义的对象，如图节点1；&lt;/li&gt;
&lt;li&gt;标记年轻代中活着的对象引用到的老年代的对象（指的是年轻代中还存活的引用类型对象，引用指向老年代中的对象）如图节点2、3；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;并发标记的好坏&#34;&gt;并发标记的好坏?&lt;/h3&gt;
&lt;p&gt;标记作为垃圾回收的第一步，现在知道如何进行标记，接下来就是遍历这些对象，将所有未标记的对象清理就完成GC了。&lt;/p&gt;
&lt;p&gt;然而事实上并没有这么简单，如果标记的时候是STW的，那就是这么简单，但是如果标记过程都STW会造成暂停时间过长，给人的感觉就是系统一卡一卡的。&lt;/p&gt;
&lt;p&gt;于是就把标记的过程改成并发的进行，也就是CMS中并发标记的过程，然而这就是一切复杂问题的源头。虽然并发标记提升了标记的效率，但是因此却引发了一系列的问题。&lt;/p&gt;
&lt;p&gt;因为并发标记时，gc线程和用户线程是并行的，所以在这个过程中会出现下面的情况(需要了解&lt;a href=&#34;https://www.jianshu.com/p/12544c0ad5c1&#34;&gt;三色标记法与读写屏障&lt;/a&gt;)：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
